#version 430 core

#define TILE_SIZE 16
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Using vec4 for better alignment on the GPU
struct TileAABB {
	vec4 min;
	vec4 max;
	vec4 extent;
};

struct Plane {
	vec4 normal;
	vec4 distance;
};

struct Frustum {
	Plane planes[4];
	vec4 nearFar;
};

//layout(std430, binding = 1) buffer tileGrid {
//	TileAABB tile[];
//};

layout(std430, binding = 1) buffer tileGrid {
	Frustum tile[];
};

layout(std430, binding = 3) buffer activeClusterSSBO {
	int activeClusters[];
};

layout(std430, binding = 4) buffer globalIndexCountSSBO {
	float testDepth[];
};

layout(std430, binding = 5) buffer testSSBO {
	uint testCluster[];
};

layout(std430, binding = 6) buffer countSSBO {
	uint activeClusterCount;
};

uniform sampler2D depthTex;

uniform mat4 projMatrix;
uniform vec2 pixelSize;
uniform int tilePxX;
uniform int tilePxY;

uniform float scale;
uniform float bias;

float lineariseDepth(float depthSample) {
	float depthRange = depthSample * 2.0 - 1.0;
	float lin = 2.0 * 2.0 * 1150.0 / (1150.0 + 2.0 - depthRange * (1150.0 - 2.0));
	//float lin = projMatrix[3][2] / (projMatrix[2][2] + depthRange);
	return lin;
}

const uvec3 gridDims = uvec3(16, 8, 24);

void main() {
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);

	vec2 texCoord = vec2(location) * pixelSize;
	float depth = texture(depthTex, texCoord).r;

	uint zTile     = uint(max(log2(lineariseDepth(depth)) * scale + bias, 0.0));
	uvec3 tiles = uvec3(uvec2(location.x / tilePxX, location.y / tilePxY), zTile);
	uint clusterIndex = tiles.x + (gridDims.x * (tiles.y + gridDims.y * tiles.z));
	activeClusters[clusterIndex] = 1;
//	testDepth[clusterIndex] = clusterIndex;
	//testCluster[clusterIndex] = gl_GlobalInvocationID.x;
	if (location.xy == ivec2(0)) {
	   activeClusterCount = 0;
	}
}