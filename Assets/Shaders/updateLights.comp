#version 430 core

#define THREADS 1024
layout(local_size_x = THREADS, local_size_y = 1, local_size_z = 1) in;

struct PointLight {
	 vec4 colour;
	 vec4 pos;
	 vec4 radius;
 };

layout(std430, binding = 0) buffer lightSSBO {
	PointLight pointLights[];
};

uniform int noOfLights;
uniform vec3 minBounds;
uniform vec3 maxBounds;
uniform float dt;

void main() {
    uint threadCount = THREADS;
	uint batchCount = (noOfLights + threadCount - 1) / threadCount;
	for (uint i = 0; i < batchCount; ++i) {
		uint lightIndex = i * threadCount + gl_LocalInvocationIndex;

		if (lightIndex >= noOfLights) {
			break;
		}

		PointLight light = pointLights[lightIndex];
		light.pos.y = mod((light.pos.y + (-8.0f * dt) - minBounds.y + maxBounds.y), maxBounds.y) + minBounds.y;
		pointLights[lightIndex].pos = light.pos;

	}
}