#version 460 core
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_ballot : enable

#define THREADS 64
#define MAX_LIGHTS_PER_TILE 2048

// Provide a fallback using old method if extensions aren't available
#if defined(GL_KHR_shader_subgroup_basic) && defined(GL_KHR_shader_subgroup_ballot) && defined(GL_KHR_shader_subgroup_arithmetic)
	#define USE_SUBGROUPS 1
#else
	#define USE_SUBGROUPS 0
#endif

#include "Shared/ComputeBindings.h"
#include "Shared/LightDefinitions.h"

layout(local_size_x = THREADS, local_size_y = 1, local_size_z = 1) in;

uniform mat4 viewMatrix;
uniform mat4 projMatrix;

uniform sampler2D depthTex;

struct TileAABB {
	vec4 min;
	vec4 max;
	vec4 extent;
};

struct Plane {
	vec4 normal;
	vec4 distance;
};


struct Frustum {
	Plane planes[4];
	vec4 nearFar;
};

//struct LightGrid {
//	uint offset;
//	uint count;
//};

//struct LightGrid {
//	uint count;
//	uint lightIndices[MAX_LIGHTS_PER_TILE];
//};
//
//struct ViewFrustum {
//	vec4 planes[6];
//	vec4 points[8]; // 0-3 near 4-7 far
//};

layout(std430, binding = COMPUTE_BINDING_LIGHT_BUFFER) readonly buffer lightSSBO {
	PointLight pointLights[];
};

//layout(std430, binding = 1) buffer gridSSBO {
//	TileAABB tiles[];
//};

layout(std430, binding = COMPUTE_BINDING_GRID_BUFFER) readonly buffer tileGrid {
	Frustum tile[];
};

layout(std430, binding = COMPUTE_BINDING_LIGHT_INDEX_BUFFER) writeonly buffer lightGridSSBO {
	int lightIndices[];
};

//layout(std430, binding = 2) buffer lightGridSSBO {
//	LightGrid lightVisibilities[];
//};

layout(std430, binding = COMPUTE_BINDING_TEST4) buffer globalIndexCountSSBO {
	float testDepth[];
};

uniform int noOfLights;
uniform uint totalNumLights;
uniform ivec2 screenSize;
uniform vec2 pixelSize;
uniform mat4 invProj;
uniform float near;
uniform float far;

//shared PointLight sharedLights[TILE_SIZE * TILE_SIZE];
//shared uint globalIndexLightCount;

//shared vec4 frustumPlanes[6];
shared uint visibleLightCount;
shared int visibleLightIndices[MAX_LIGHTS_PER_TILE];
shared Frustum tileFrustum;
shared bool workDone;

shared mat4 viewProjMatrix;
//shared mat4 invViewProj;
//shared mat4 invProj;

//bool sphereAABBIntersect(uint light, uint tile);
//float sqDistPointAABB(vec3 point, uint tile);
//bool quickIntersect(uint light, uint tile);
//bool frustumSphereIntersect(uint light, uint tile);
TileAABB AABBtransform(TileAABB aabb, mat4 mat);
vec4 ClipToView(vec4 clip);
bool SphereInsideFrustum(vec3 posVs, float radius, Frustum frustum, float zNear, float zFar);
bool SphereInsidePlane(vec3 posVs, float radius, Plane plane);


float linearDepth(float depthSample) {
	float depthRange = fma(2.0, depthSample, -1.0);
	float linear = 2.0 * near * far / (far + near - depthRange * (far - near));
	return linear;
}

void main() {
	ivec2 tileId = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);

	//uint tileIndex = tileId.y * tileNumber.x + tileId.x;
	//uint tileIndex = gl_LocalInvocationIndex + gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z * gl_WorkGroupID.z;
	uint tileIndex = gl_WorkGroupID.x +
		gl_WorkGroupID.y * gl_NumWorkGroups.x +
		gl_WorkGroupID.z * (gl_NumWorkGroups.x * gl_NumWorkGroups.y);

	//if (gl_LocalInvocationIndex == 32) {
	////	vec2 test = vec2(location) * pixelSize;
	//	testDepth[tileIndex] = gl_LocalInvocationIndex;
	//}

    // One thread to init values and get the group's tile frustum.
	// Could also reset everything in the indices buffer to 0 if so desired
	if (gl_LocalInvocationIndex == 0) {
		visibleLightCount = 0;
		viewProjMatrix = projMatrix * viewMatrix;
		//invProj = inverse(projMatrix);
		//invViewProj = inverse(viewProjMatrix);
		tileFrustum = tile[tileIndex];
		workDone = false;

		//if (tileId.x < 78) {
		//	tileFrustum.planes[1] = tile[tileIndex + 1].planes[0];
		//	tileFrustum.planes[1].normal = -tileFrustum.planes[1].normal;
		//}
		//if (tileId.y < 42) {
		//	tileFrustum.planes[2] = tile[tileIndex + (tileId.y * tileNumber.x)].planes[3];
		//	tileFrustum.planes[2].normal = -tileFrustum.planes[2].normal;
		//}
	}

	barrier();

	float minDepthVS = tileFrustum.nearFar.x;
	float maxDepthVS = tileFrustum.nearFar.y;
	float nearClipVS = ClipToView(vec4(0.0, 0.0, 0.0, 1.0)).z;

	Plane minPlane = { vec4(0.0, 0.0, -1.0, 0.0), vec4(-minDepthVS, 0.0,0.0,0.0) };

	barrier();

	uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
	uint batchCount = (noOfLights + threadCount - 1u) / threadCount;
	for (uint i = 0; i < batchCount; ++i) {

		uint lightIndex = i * threadCount + gl_LocalInvocationIndex;

#if !USE_SUBGROUPS
		if (lightIndex >= noOfLights || visibleLightCount >= MAX_LIGHTS_PER_TILE) {
			break;
		}
#else
		// Need to do more profiling to see if this actually helps
		bool isDone = workDone;
		if (isDone) {
			break;
		}
#endif

		bool isVisible = false;
		// TODO: Test performance of removing the conditional and just testing again a light of negative radius instead (always culled)
		if (lightIndex < noOfLights) {

			/*lightIndex = min(lightIndex, noOfLights);*/
			// TODO: Try loading a batch of lights into shared memory, and iterating over that.
			PointLight light = pointLights[lightIndex];
			vec4 position = light.pos;
			position.w = 1.0;
			float radius = light.radius.x;
			vec4 vPos = viewMatrix * position;

			bool inside = SphereInsideFrustum(vPos.xyz, radius, tileFrustum, nearClipVS, maxDepthVS) && !SphereInsidePlane(vPos.xyz, radius, minPlane);
			isVisible = inside;
			#if !USE_SUBGROUPS
				if (isVisible && visibleLightCount < MAX_LIGHTS_PER_TILE) {
					uint offset = atomicAdd(visibleLightCount, 1);
					visibleLightIndices[offset] = int(lightIndex);
				}
			#endif
		}

#if USE_SUBGROUPS
		uint visMask = isVisible ? 1u : 0u;

		uint subgroupOffset = subgroupExclusiveAdd(visMask);

		uint subgroupCount = subgroupAdd(visMask);

		// The "lead lane" in the subgroup does a single atomic
		// Preferable to having each thread an atomic op
        uint groupBase  = 0u;
        if (subgroupElect()) {
            groupBase = atomicAdd(visibleLightCount, subgroupCount);
			if (groupBase >= MAX_LIGHTS_PER_TILE) {
				workDone = true;
			}
        }
        // Broadcast the result so all lanes see it
        groupBase = subgroupBroadcastFirst(groupBase);

		if (isVisible)
        {
            // We flatten the offset: groupBase + subgroupOffset
			// And write our light indices buffer
            // There's a chunk for each cluster, each chunk up to 2048 lights
            uint writeIndex = tileIndex * MAX_LIGHTS_PER_TILE + groupBase + subgroupOffset;

            // Always be sure we don’t exceed MAX_LIGHTS_PER_TILE
			// Do we need this if we're checking earlier?
            if (writeIndex < tileIndex * MAX_LIGHTS_PER_TILE + MAX_LIGHTS_PER_TILE) {
                lightIndices[writeIndex] = int(lightIndex);
            }
        }

#endif
	}

	barrier();

	// If there's space left, one thread places a sentinel at the end of the workgroups light range
	if (gl_LocalInvocationIndex == 0) {
		uint offset = tileIndex * MAX_LIGHTS_PER_TILE;
		uint finalCount = visibleLightCount;
#if !USE_SUBGROUPS
		for (uint i = 0; i < finalCount && i < MAX_LIGHTS_PER_TILE; i++) {
			lightIndices[offset + i] = visibleLightIndices[i];
		}
#endif
		if (finalCount < MAX_LIGHTS_PER_TILE) {
			lightIndices[offset + finalCount] = -1;
		}

	}
}

vec4 ClipToView(vec4 clip) {
	vec4 view = invProj * clip;
	view = view / view.w;
	return view;
}

bool SphereInsideFrustum(vec3 posVs, float radius, Frustum frustum, float zNear, float zFar) {
	bool result = true;

	if (posVs.z - radius > zNear || posVs.z + radius < zFar) {
		result = false;
	}

	for (int i = 0; i < 4 && result; i++) {
		if (SphereInsidePlane(posVs, radius, frustum.planes[i])) {
			result = false;
		}
		//result = result && !SphereInsidePlane(posVs, radius, frustum.planes[i]);
	}

	return result;
}

bool SphereInsidePlane(vec3 posVs, float radius, Plane plane) {
	return (dot(plane.normal.xyz, posVs) - plane.distance.x) < -radius;
}

//float sqDistPointAABB(vec3 point, uint tile) {
//	float sqDist = 0.0;
//	//TileAABB currentTile = tiles[tile];
//	tiles[tile].max[3] = tile;
//	for (int i = 0; i < 3; ++i) {
//		float v = point[i];
//		if (v < currentTile.min[i]) {
//			sqDist += (currentTile.min[i] - v) * (currentTile.min[i] - v);
//		}
//		if (v > currentTile.max[i]) {
//			sqDist += (v - currentTile.max[i]) * (v - currentTile.max[i]);
//		}
//	}
//	return sqDist;
//}

TileAABB AABBtransform(TileAABB aabb, mat4 mat) {
	vec3 _min = aabb.min.xyz;
	vec3 _max = aabb.max.xyz;
	vec3 corners[8];
	corners[0] = _min;
	corners[1] = vec3(_min.x, _max.y, _min.z);
	corners[2] = vec3(_min.x, _max.y, _max.z);
	corners[3] = vec3(_min.x, _min.y, _max.z);
	corners[4] = vec3(_max.x, _min.y, _min.z);
	corners[5] = vec3(_max.x, _max.y, _min.z);
	corners[6] = _max;
	corners[7] = vec3(_max.x, _min.y, _max.z);
	_min = vec3(1000000);
	_max = vec3(-1000000);

	for (uint i = 0; i < 8; ++i) {
		corners[i] = (mat * vec4(corners[i], 1)).xyz;
		_min = min(_min, corners[i]);
		_max = max(_max, corners[i]);
	}

	TileAABB _aabb;
	_aabb.min = vec4(_min, 0.0);
	_aabb.max = vec4(_max, 0.0);
	_aabb.extent = vec4(0.0);
	return aabb;
}